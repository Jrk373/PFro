---
title: "Peer and Family Run Organization Activity in Northern Arizona"
author: 
  name: "John Ryan Kivela, MA & Victoria Tewa, LPC"
  email: "Ryan.Kivela@narbha.org"
  affiliation: "The Alliance ACO"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

```{r}
#| label: Setup
#| include: true
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(readxl)
library(reprex)
library(knitr)
library(kableExtra)
library(scales)
library(tidyr)
library(formattable)

# table for inline code
InLineCode <- data.frame(
  Member_Report_Date = "July 27, 2023"
  )

AZ_County_Map <- (c("Apache", "Coconino", "Mohave", "Navajo", "Yavapai"))
Provider_ShortName <- (c("CBI", "CPIH", "EHS", "LCBHC", "MMHC", "SHG", "SBH", "TGC", "WYGC"))

data("county.map")
```

# Executive Summary

PFro provider candidates were identified by Alliance ACO executive leadership in collaboration with Health Choice BCBSAZ executive leadership. The Alliance then discussed different fiscal and strategic approaches to on-boarding Peer and Family Run Organizations (PFros). In keeping with Alliance vision and principles, data will be used to drive fiscal and strategic decisions.


The Alliance has researched the prevalence and impact of PFros on members of the Alliance ACO. The results of this research will drive future decision making as we incorporate PFros into the Alliance ACO. 

Initial data was collected in collaboration with the Alliance ACO, The Narbha Institute, and Health Choice BCBSAZ. By using the methodology outlined below, we found that 0.2%, or 273 of the 96,278 Alliance ACO members received peer and family run services in the 2022 calendar year. Of those, 0.01%, or 13 people have been deemed eligible for a HEDIS/NCQA[^1] VBP measure in the 2023 VBP measurement year.

[^1]: NCQA. (2023). *HEDIS and Performance Measurement*. https://www.ncqa.org/hedis/

# Method

Now, let us take you on a journey to how we reached these conclusions.

## Data Sources

Data elements used to drive fair and equitable decisions were:

-   Member Enrollment data (as of 7/21/23)
    -   Demographics
    -   Residential information
-   Behavioral health claims (1/1/22 - 12/31/22)
    -   Service utilization 
    -   Finances
-   Value Based Purchasing Quality Roster (as of 7/21/23)
-   FUH7 and AMM validation data

These elements create a comprehensive dataset from which multiple variables can be used to create any desired combination of analysis tables. Variables include demographics, service utilization data, diagnostic groupings, financial spend, and value based measures.

## Data Preparation

### Alliance ACO Member Roster

First, we extract the current member roster from BCBSAZ Health Choice data warehouse. This roster was pulled on 7/21/23. This original Health Choice Global Member Roster includes all HCA members in the Arizona ACC health plan, regardless of location or enrollment status.

```{sql}
#| label: Member Roster Pull
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false
-- This is the code to extract Alliance ACO members from HCA data warehouse
-- Updated 5/2/23 by JRK

SELECT dm.primaryId
	, dm.ahcccsId
	, cid.lastName
	, cid.firstName
	, cid.sex
	, cid.dob
	, cid.zipCode
	, da.resCountyName
	, dm.bhhShortname
	, dm.bhhEffectiveDate
	, dm.lineOfBusiness
	, dm.bhc
	, dm.disenrollmentDate


FROM 
globalMembers.dbo.dailyMembershipAllArizonaEnrollments dm
LEFT JOIN globalMembers.dbo.clientIdPlus cid ON dm.primaryId = cid.primaryId
LEFT JOIN globalMembers.dbo.dailyMembershipAllArizonaAddresses da ON dm.primaryId = da.primaryId

WHERE
dm.LineOfBusiness = 'ArizonaACC'
```

Then the HC Global Member Roster is filtered to include Alliance ACO members only by filtering for residential addresses in Northern Arizona, and auto-assignments to Alliance Providers. For this study, we include members who were enrolled as of 1/1/22, and who were not disenrolled until at least after 1/1/23. This is called the Alliance ACO Member Roster.

```{r}
#| label: Load Global Members Roster
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false
 
GlblMmbrshp <- read_xlsx("./data/data_original_glblmbrs_2023-07-26_globalMembersRoster.xlsx", sheet = "Sheet1")

# Calculate active members based on BCBSAZ auto-enrollment
NAZMmbrshp <- GlblMmbrshp |>
  filter(resCountyName %in% AZ_County_Map) |>
  filter(bhhShortname %in% Provider_ShortName) |>
  filter(disenrollmentDate > as.Date("2022-12-31") | is.na(disenrollmentDate)) |>
  filter(bhhEffectiveDate < "2022-12-31") |> 
  mutate(bhhShortname = 
           if_else((bhhShortname == "SBH"), "SBHS", 
              if_else((bhhShortname == "WYGC"), "PH", 
                bhhShortname)
           ))

NAZMmbrshp <- NAZMmbrshp |> 
mutate(Age = as.integer(difftime(Sys.Date(), dob, units = "days") / 365.25))

```

### Peer and Family Run Organization Activity

Next, we extracted all behavioral health claims for the 2022 VBP Measurement Year (1/1/2022-12/31/2022) from the BCBSAZ-Health Choice data warehouse that were delivered by key PFros in the Health Choice network.This data was extracted on 7/27/23. This dataset is called the PFro BH Claims.

```{sql}
#| label: BH Claims Pull
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false


-- Declare start and end variables
DECLARE @start DATE = '2022-01-22';
DECLARE @end DATE = '2022-12-31';
-- This is some sql code that extracts all claims by specific PFros, as outlined by NPI below.

-- Check if the temporary table exists and drop it if it does
IF OBJECT_ID('tempdb..#ValueSetListMy2023') IS NOT NULL
    DROP TABLE #ValueSetListMy2023;

-- Create a temporary table
CREATE TABLE #ValueSetListMy2023 (Code VARCHAR(100) COLLATE SQL_Latin1_General_CP1_CI_AS);

-- Insert values into the temporary table
INSERT INTO #ValueSetListMy2023 (Code)
VALUES ('1528415650'), ('1528415650'), ('1932373867'), ('1891969879'), ('1891969879'), ('1679747505'), ('1679747505'), ('1760656698'), ('1760656698'), ('1669646592'), ('1669646592'), ('1164799987'), ('1437599230'), ('1811454754'), ('1467751511'), ('1467751511'), ('1073935326'), ('1073935326'), ('1497815567'), ('1366884413'), ('1366884413'), ('1851735369'), ('1407257595'), ('1992816060');

-- Query to retrieve data from the claims.dbo.shcavos table
SELECT DISTINCT
	shcavos.primaryID, 
	id.BCBSMedicaidId AS MemberID,
	shcavos.AHCCCSID,
	shcavos.MemberCounty,
	shcavos.MemberZipCode,
	shcavos.MemberACCGSA,
	shcavos.ra,
	shcavos.begDate,
	shcavos.svccode,
	shcavos.ProviderName,
	shcavos.Placesvc,
	shcavos.ProviderType,
	shcavos.calcnetpd,
	shcavos.units,
	shcavos.PaySource,
	shcavos.PlanType,
	shcavos.AdmitDate,
	shcavos.DischargeDate,
	shcavos.RenderingProviderNpi,
	shcavos.RenderingProviderCounty,
	shcavos.RenderingProviderZipCode,
    shcavos.PrimaryDiagnosis,
    shcavos.Dx1,
    shcavos.Dx2,
    shcavos.Dx3,
    shcavos.Dx4,
    shcavos.Dx5,
    shcavos.Dx6,
    shcavos.Dx7,
    shcavos.Dx8,
    shcavos.Dx9,
    shcavos.Dx10,
    shcavos.Dx11,
    shcavos.Dx12,
    CASE WHEN v.Code IS NOT NULL THEN 'True' ELSE 'False' END AS MatchFound
FROM claims.dbo.shcavos AS shcavos
LEFT JOIN GlobalMembers.dbo.ClientIdPlus id ON shcavos.primaryID = id.primaryID
LEFT JOIN #ValueSetListMy2023 AS v ON shcavos.RenderingProviderNpi COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx1 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx2 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx3 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx4 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx5 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx6 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx7 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx8 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx9 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx10 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx11 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
                                    OR shcavos.Dx12 COLLATE SQL_Latin1_General_CP1_CI_AS = v.Code
WHERE shcavos.begDate BETWEEN @start AND @end
AND CASE WHEN v.Code IS NOT NULL THEN 'True' ELSE 'False' END = 'True'
AND shcavos.EncounterStatus = 'AP'
```

```{r}
#| label: Load PFro Claims
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Load the claims pull from HCA warehouse
PFroBHClaims <- read_xlsx ("./data/BHClaims.xlsx", sheet = "Sheet1")

# Rename the column
colnames(PFroBHClaims)[colnames(PFroBHClaims) == "begDate"] <- "DateOfService"
colnames(PFroBHClaims)[colnames(PFroBHClaims) == "calcnetpd"] <- "AmountPd"

PFroBHClaims <- PFroBHClaims |> 
  filter(MemberACCGSA == "North")

```

Now, we merge the Alliance ACO Member Roster with the PFro BH Claims records, attaching each behavioral health claim to its respective member information from the roster. The resulting table is a list of actively enrolled Alliance members with PFro behavioral health claims. This dataset is called PFro Activity (aka, "La Tabla Monstrua)". 

This table contains a record of all Alliance ACO members who have received a service from a PFro, the type of service, responsible provider, and other utilization data.

```{r}
#| label: Merge Enrollment
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Rename the column "ahcccsId" to "AHCCCSID"
colnames(NAZMmbrshp)[colnames(NAZMmbrshp) == "ahcccsId"] <- "AHCCCSID"

# Merge the data frames
PFroActivity <- merge(x = NAZMmbrshp,
                      y = PFroBHClaims,
                      by = "AHCCCSID"
                      )

```

Next, we add the Behavioral Health Services Matrix[^2] description words for the service codes, just to make it more easily readable.

[^2]: AZAHCCCS. (2023). *Behavioral Health Services Matrix.* https://www.azahcccs.gov/PlansProviders/Downloads/MedicalCodingResources/

```{r}
#| label: Append B2 Matrix data to table
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

B2MatrixDesc <- read_xlsx("./data/B2MatrixDescriptions.xlsx", sheet = "Sheet1")

# Rename the column 
colnames(B2MatrixDesc)[colnames(B2MatrixDesc) == "Code"] <- "svccode"

# Perform a left join to add "VBPQR$Measure" and "VBPQR$Gap.Status" to PFroActivity
PFroActivity <- merge(x = PFroActivity,
                      y = B2MatrixDesc,
                      by = "svccode",
                      all.x = TRUE)

```

Then, we add indicators for ICD-10 diagnostic group ranges to the PFro Activity dataset. The Alliance has previously conducted research that indicates Mood Disorder and Anxiety Disorder diagnostic group ranges are more predictive of negative health and system outcomes, like inpatient care and high cost claims. This is a potential target population for future Alliance PFro Providers[^_].

[] predictive modeling study reference here

```{r}
#| label: Append Dx Group Range to table
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

#Load ICD10 Data
ICD10DxAndGroupsCombined <- read_csv("./data/ICD10andBHGroupingsCombined.csv")

# Rename the column
colnames(ICD10DxAndGroupsCombined)[colnames(ICD10DxAndGroupsCombined) == "primaryDiagnosis"] <- "PrimaryDiagnosis"

PFroActivity <- merge(x = PFroActivity,
                      y = ICD10DxAndGroupsCombined,
                      by = "PrimaryDiagnosis",
                      all.x = TRUE)

```

### Value Based Purchasing Quality Reports

Next, add data from the aggregated Health Choice VBP Quality Roster. The Alliance has thoroughly documented and tested a validation model for the NCQA/HEDIS FUH measure[^3]. One output of that project is an aggregated and cleaned roster containing all of the data from the Health Choice VBP Quality Rosters of ALL of the Alliance Providers. 

Incorporating this data allows us to identify those members who have, and have not, been served by a PFro, who have also been deemed eligible for a VBP measure. 

We import 2 sets of VBPQR data:

-   Report date: 3/23/23, for historical comparison
-   Report date: 7/21/23, for current activity (*To be used in future research*)

The report from 3/23/23 contains all VBP QR data for the 2022measurement year (1/1/22-12/31/22), and provides the basis for historical comparisons.

This 7/21/23 report gives us the most recently available VBPQR data in order to have insight into the members' needs today.

It should be noted that some members are listed more than once on the HC VBPQR for the same measure, sometime with different gap statuses. This inflates the data by only 3 records (3 table rows).

[^3]: Kivela, J.R. (July, 2023). Value Based Purchasing Report. *The Northern Arizona Regional Behavioral Health Alliance*.

```{r}
#| label: Load and merge historical VBP data
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Load HC VBPQR
VBPQR_original <- read.csv("./data/VBP_Rep_Comb_validation_complete_2023-03-23.csv")

VBPQR <- VBPQR_original |> 
  select(Member.ID,
         Provider_Shortname,
         SubMeasure.ID,
         Numerator) |> 
  filter(SubMeasure.ID %in% c("AMM2", "FUH7", "HDO")) |> 
  mutate(Gap.Status = ifelse(Numerator == "0", "OPEN", "CLOSED"))
  
  

# Rename the column 
colnames(VBPQR)[colnames(VBPQR) == "Member.ID"] <- "MemberID"

# Remove the first 3 characters from MemberID and store in a new column AHCCCSID
VBPQR$AHCCCSID <- substr(VBPQR$MemberID, 4, nchar(VBPQR$MemberID))

# Merge PFro Activity and VBPQR, keeping all PFroActivity
PFroActivity <- merge(x = PFroActivity,
                             y = VBPQR,
                             by = "AHCCCSID",
                             all.x = TRUE
                             )

```

```{r}
#| label: Load and merge current VBP data
#| eval: false
#| include: true
#| echo: true
#| warning: false
#| error: false

# Load HC VBPQR
VBPQR_Current <- read.csv("./data/VBPQR_AllAPsCombined_Cleaned_complete_2023-07-21.csv")

# Rename the column 
colnames(VBPQR_Current)[colnames(VBPQR_Current) == "Member.ID"] <- "MemberID"

# Remove the first 3 characters from MemberID and store in a new column AHCCCSID
VBPQR_Current$AHCCCSID <- substr(VBPQR_Current$MemberID, 4, nchar(VBPQR_Current$MemberID))

# Merge PFro Activity and VBPQR, keeping all PFroActivity
PFroActivity_Current <- merge(x = PFroActivity,
                             y = VBPQR_Current,
                             by = "AHCCCSID",
                             all.x = TRUE
                             )

```

Then, we add an indicator for Alliance ACO members who had a valid FUH7 inpatient service that would qualify them for the FUH7 VBP Measure. 

The FUH7 data is for claims that were authorized and paid for the measurement year 2023-01-01 to 2023-12-31. While the year is out of sync with our historical PFro Activity data set (2022-01-01 to 20232-12-31), the more current data from our active VBP Validation process gives us a better picture of the member's needs today.

```{r}
#| label: Add inpatient indicator
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Load IP Claims from FUH VBP Model
IPClaims <- read_xlsx("./data/data_original_cat_2022-12-31_IPClaims.xlsx")

# Rename the column 
colnames(IPClaims)[colnames(IPClaims) == "AzAhcccsId"] <- "AHCCCSID"

# Create a new column in PFroActivity called isIP
PFroActivity <- PFroActivity %>%
  mutate(isIP = ifelse(AHCCCSID %in% IPClaims$AHCCCSID, "IPClaim", "NoIP")
        )

```

Then, we add another indicator to the PFro Activity dataset for Alliance ACO members who had a valid AMM antidepressant medication prescription that would qualify them for the AMM VBP Measure. 

We use the AMM Validation PBM claims data to identify any Alliance ACO members with a potentially eligible AMM pharmacy claim according to HC claims that have been approved and paid. This AMM data is for claims that were authorized and paid for the measurement year Intake Period 2021-05-01 to 2022-04-30.

The AMM Validation model is still under development at the time of this writing. However, the core set of PBMClaims data for antidepressant medications is fully valid. Completion of the model will give us more insight, but this is enough to be getting on with.

```{r}
#| label: Add antidepressant med indicator
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Load PBM Claims from AMM Validation Model
PBMClaims <- read_xlsx("./data/DataRaw_PBMClaims_2022-04-30.xlsx", sheet = "Sheet1")

# Rename the column 
colnames(PBMClaims)[colnames(PBMClaims) == "clientID"] <- "AHCCCSID"

# Create a new column in PFroActivity called isADMed
PFroActivity <- PFroActivity %>%
  mutate(isADMed = ifelse(AHCCCSID %in% PBMClaims$AHCCCSID, "ADMedClaim", "NoADMed")
  )

write.csv(PFroActivity, "./data/output/PFroActivity.csv")
```

### PFro Summary

Finally, we select desired variables from this monster table into the final dataset, called the PFro Summary dataset. We are able to apply this data to create any desired combination of variables.

Some examples of these specialized datasets are contained the analysis below:

-   Summary of All PFro activity
-   Unduplicated list of members served by PFro    
-   PFro Engagement Matrix    

```{r}
#| label: Dial in the data set
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Now select the key variables for analysis
PFroSummary <- PFroActivity |> 
  select(
    AHCCCSID,
    primaryId,
    ra,
    lastName,
    firstName,
    sex,
    dob,
    Age,
    resCountyName,
    zipCode,
    DateOfService,
    svccode,
    Code_Description,
    ProviderName,
    ProviderType,
    Placesvc,
    units,
    AmountPd,
    PrimaryDiagnosis,
    ICD10_Description,
    DiagnosisGroupRange,
    Diagnosis_Group,
    isIP,
    isADMed,
    SubMeasure.ID,
    Gap.Status
    )

# Write to CSV
write.csv(PFroSummary, "./data/output/PFroSummary.csv")

# Create unduplicated roster by provider
PFroSummary_Distinct_byProvider <- PFroSummary %>%
  distinct(AHCCCSID, .keep_all = TRUE)

# Write to CSV
write.csv(PFroSummary_Distinct_byProvider, "./data/output/PFroSummary_Distinct_byProvider.csv")
```

# Analysis

## Overall Service Utilization and Cost

### Table 1: PFro Services by Provider

Table 1 contains the total number of services delivered to Alliance members by each PFro, and how much they were paid, during the 2022 calendar year. 

Combinations of provider and service code that accounted for less than 1% of the total services delivered were excluded from the analysis.

```{r}
#| label: First Table
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Assuming PFroSummary is the data frame with columns "Code_Description", "ProviderName", "svccode", "AHCCCSID", and "AmountPd"

# Calculate the count of Code_Description by ProviderName and svccode
code_prov_counts <- PFroSummary %>%
  group_by(Code_Description, ProviderName, svccode) %>%
  tally() %>%
  ungroup()

# Calculate the total count of Code_Description
total_count <- sum(code_prov_counts$n)

# Calculate the percentage of count for each Code_Description
code_prov_counts <- code_prov_counts %>%
  group_by(Code_Description) %>%
  mutate(Percentage_of_Grand_Total = (n / total_count) * 100)

# Filter to keep only Code_Description rows representing at least 1% of the grand total
code_prov_counts_filtered <- code_prov_counts %>%
  filter(Percentage_of_Grand_Total >= 1)

# Reorder the columns to have ProviderName first, followed by svccode
code_prov_counts_filtered <- code_prov_counts_filtered %>%
  select(ProviderName, svccode, n, Code_Description, Percentage_of_Grand_Total)

# Sort the table by ProviderName in ascending order
code_prov_counts_filtered <- code_prov_counts_filtered %>%
  arrange(ProviderName)

# Summarize the AmountPd column to get the sum of Amount Paid for each Code_Description by ProviderName
amount_paid_sum <- PFroSummary %>%
  filter(Code_Description %in% code_prov_counts_filtered$Code_Description) %>%
  group_by(Code_Description, ProviderName) %>%
  summarise(Sum_AmountPd = sum(AmountPd))

# Join the summarized Amount Paid data with the filtered table
code_prov_counts_filtered <- left_join(code_prov_counts_filtered, amount_paid_sum, by = c("Code_Description", "ProviderName"))

# Add a column that is a count of distinct AHCCCSID for the given svccode
code_prov_counts_filtered <- code_prov_counts_filtered %>%
  left_join(
    PFroSummary %>%
      group_by(ProviderName, svccode) %>%
      summarise(Distinct_AHCCCSID = n_distinct(AHCCCSID)),
    by = c("ProviderName", "svccode")
  )

# Do math to determine avg cost per member per provider per code
code_prov_counts_filtered$AvgCostPerMember <- code_prov_counts_filtered$Sum_AmountPd / code_prov_counts_filtered$Distinct_AHCCCSID

# Format the number as currency with commas for thousands and two decimal places
code_prov_counts_filtered$Sum_AmountPd <- currency(code_prov_counts_filtered$Sum_AmountPd, symbol = "$", digits = 0, big.mark = ",")

# Format the number as currency with commas for thousands and two decimal places
code_prov_counts_filtered$AvgCostPerMember <- currency(code_prov_counts_filtered$AvgCostPerMember, symbol = "$", digits = 0, big.mark = ",")

# Format the Percentage_of_Grand_Total column with two decimal places and a "%" symbol
code_prov_counts_filtered$Percentage_of_Grand_Total <- sprintf("%.2f%%", code_prov_counts_filtered$Percentage_of_Grand_Total)

# Rename the columns
code_prov_counts_filtered <- code_prov_counts_filtered %>%
  rename(
    `Provider Name` = ProviderName,
    `Service Code` = svccode,
    `Number of Services` = n,
    `Code Description` = Code_Description,
    `Percent of All Services` = Percentage_of_Grand_Total,
    `Amount Paid` = Sum_AmountPd,
    `Members Served` = Distinct_AHCCCSID,
    `Avg Amount Paid per Person` = AvgCostPerMember
    )

# Display the final table using kable
kable(code_prov_counts_filtered, format = "html", caption = "Summary of PFro Services by Service Code")

```

### Figure 1: PFro Services by Provider

This is a visualization of the percent of total services delivered to Alliance members by each PFro during the 2022 calendar year. 

In this chart, each bar represents a portion of all services delivered from all providers. For example, MIKID's provision of 2,950 Case Management (T1016) services, accounts for 30% of all of the PFro services delivered to Alliance ACO members. 

Combinations of provider and service code that accounted for less than 1% of the total services delivered were excluded from the analysis.

```{r}
#| label: Count PFro Services by Provider
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Calculate the count of svccode by ProviderName
provider_svccode_counts <- PFroSummary %>%
  count(ProviderName, svccode)

# Calculate the grand total count of svccode
grand_total <- sum(provider_svccode_counts$n)

# Calculate the percentage of count for each svccode by ProviderName
provider_svccode_counts <- provider_svccode_counts %>%
  group_by(ProviderName) %>%
  mutate(Percentage = (n / grand_total) * 100)

# Filter to keep only svccodes accounting for at least 1% of the grand total
provider_svccode_counts_filtered <- provider_svccode_counts %>%
  filter(Percentage >= 1)

# Create the chart with svccode on the y-axis and the count as a percentage of the grand total on the x-axis, clustered by ProviderName with custom colors

PFro_SvcByProv <- ggplot(provider_svccode_counts_filtered, aes(x = Percentage, y = svccode, fill = ProviderName)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percent of Total Services by Provider",
       subtitle = "Service Codes by Provider for less than 1% removed",
       x = "Percentage of All Services", 
       y = "Service Code"
       ) +
  theme_minimal() +
  scale_x_continuous(labels = scales::percent_format(scale = 1)) +
  scale_fill_viridis_d()  

## Create Graphics
# Set the file path and name for saving the .png file
Report <- "./data/output/"
Report_Filename <- "2023-07-26_PFro_SvcByProvider.png"

# Save the ggplot as a .png file
# Report
ggsave(file.path(Report, Report_Filename), plot = PFro_SvcByProv, width = 6, height = 4, dpi = 300)

PFro_SvcByProv
```

### Figure 2: PFro Services by Amount Paid

This is a visualization of the percent of total amount paid to each PFro during the 2022 calendar year. 

In this chart, each bar represents a portion of all of the money paid for services delivered from all providers. For example, MIKID's provision of 2,950 Case Management (T1016) services, for the amount of $140,986, accounted for 30.78% of all of the PFro services, and 12% of all of the money paid for PFro services during the 2022 calendar year. 

This was filtered to only include service codes that accounted for at least 1% of the total.

```{r}
#| label: Service by cost
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Calculate the count of svccode by ProviderName
sum_by_provider <- PFroSummary %>%
  group_by(ProviderName, svccode) %>%
  summarise(Total_AmountPd = sum(AmountPd))

# Calculate the grand total count of svccode
grand_total <- sum(sum_by_provider$Total_AmountPd)

# Calculate the pTotal_AmountPdfor each svccode by ProviderName
sum_by_provider <- sum_by_provider %>%
  group_by(ProviderName) %>%
  mutate(Percentage = (Total_AmountPd / grand_total) * 100)

# Filter to keep only svccodes accounting for at least 1% of the grand total
provider_svccode_counts_filtered_AmtPd <- sum_by_provider %>%
  filter(Percentage >= 1)

# Create a column for percent of total amount paid by provider

AmountPdTotal <- sum(provider_svccode_counts_filtered_AmtPd$Total_AmountPd)

provider_svccode_counts_filtered_AmtPd$PercentOfTotal <- provider_svccode_counts_filtered_AmtPd$Total_AmountPd / AmountPdTotal

# Create the chart with svccode on the y-axis and the count as a percentage of the grand total on the x-axis, clustered by ProviderName with custom colors

PFro_AmntPdByProvider <- 
  ggplot(provider_svccode_counts_filtered_AmtPd, aes(x = Percentage,
                                               y = svccode, 
                                               fill = ProviderName)
         )+
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Amount Paid for PFro Services by Provider",
       subtitle = "Services Less Than 1% Removed",
       x = "Percent of Grand Total Paid", 
       y = "Service Code") +
  theme_minimal() +
  scale_x_continuous(labels = scales::percent_format(scale = 1)) +
  scale_fill_viridis_d()

## Create Graphics
# Set the file path and name for saving the .png file
Report <- "./data/output/"
Report_Filename <- "2023-07-26_PFro_AmtPdByProvider.png"

# Save the ggplot as a .png file
# Report
ggsave(file.path(Report, Report_Filename), plot = PFro_AmntPdByProvider, width = 6, height = 4, dpi = 300)

PFro_AmntPdByProvider
```

## PFro Member Engagement

### Figure 3: PFro Member Engagement

This is a visualization of the the Alliance members who received services with a PFro during the calendar year 2022. The bar chart indicates if the member was eligible for a VBP measure, or not.

For example, of the 53 members that MIKID served during the calendar year 2022, 1 (.8% of all members) was deemed eligible for a VBP Measure by the Health Choice VBPQR, and 52 (42% of all members) were not.

For this assessment, T1016 (Case Management) was excluded because the volume obscures other clinical services.

This was filtered to only include service codes that accounted for at least 1% of the total.

```{r}
#| label: Engagement of Distinct Members
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Add is PFro Indicator to PFroSummary_Unduplicated
PFroSummary_Distinct_byProvider$isVBP <- ifelse(!is.na(PFroSummary_Distinct_byProvider$SubMeasure.ID), "On VBP Roster", "Not On VBP Roster")

# Calculate the count of distinct MemberID for each ProviderName and isVBP combination
stacked_data <- PFroSummary_Distinct_byProvider %>%
  filter(svccode != "T1016") |>
  group_by(ProviderName, isVBP) %>%
  summarise(count = n_distinct(AHCCCSID))

# Calculate the grand total
grand_total <- sum(stacked_data$count)

# Add a column for the percent of grand total
stacked_data <- stacked_data %>%
  mutate(Percent_of_Grand_Total = (count / grand_total) * 100)

PFro_VBPMemberEngagement <- ggplot(stacked_data, aes(x = count, y = ProviderName, fill = isVBP)) +
  geom_bar(stat = "identity") +
  labs(title = "Current PFro Engagement with Alliance ACO Members",
       subtitle = "Service Code T1016 Removed",
       x = "Count of Distinct MemberID",
       y = "ProviderName",
       fill = "VBP Eligibility"
       ) +
  theme_minimal() +
  theme(axis.text.x.top = element_text(hjust = 0),
        axis.title.y = element_blank(),
        plot.title = element_text(hjust = .75),
        plot.subtitle = element_text(hjust = 30)
        ) + 
  scale_fill_manual(values = c("#440154", "#FDE725"))

## Create Graphics
# Set the file path and name for saving the .png file
Report <- "./data/output/"
Report_Filename <- "2023-07-26_PFro_VBPMemberEngagement.png"

# Save the ggplot as a .png file
# Report
ggsave(file.path(Report, Report_Filename), plot = PFro_VBPMemberEngagement, width = 6, height = 4, dpi = 300)

PFro_VBPMemberEngagement

```

### Table 2: PFro Member Engagement

This table contains the distribution of distinct Alliance members, who received a PFro service, and whether or not they were deemed eligible for a VBP measure according to the HC VBP Quality Roster during the 2022 VBP measurement year.

T1016 (Case Management) was excluded because the volume obscures other clinical services.

Only includes service codes that accounted for at least 1% of the total.

```{r}
#| label: Second Table
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Format the Percentage_of_Grand_Total column with two decimal places and a "%" symbol
stacked_data$Percent_of_Grand_Total <- sprintf("%.2f%%", stacked_data$Percent_of_Grand_Total)

# Rename the column
colnames(stacked_data)[colnames(stacked_data) == "Percent_of_Grand_Total"] <- "Percent of Members Served"

colnames(stacked_data)[colnames(stacked_data) == "ProviderName"] <- "Provider Name"

colnames(stacked_data)[colnames(stacked_data) == "isVBP"] <- "VBP Eligible"

colnames(stacked_data)[colnames(stacked_data) == "count"] <- "Members"

# Create a table for the VBP engagement
kable(stacked_data, format = "html", caption = "PFro Engagement of Alliance Members")

```
### Table 3: PFro VBP Engagement Matrix

This table demonstrates the number of Alliance ACO members who have received PFro Services, or not, and if that member was eligible for a HEDIS/NCQA VBP measure.

During the 2023 measurement year, of the total Alliance ACO membership of 103,487 members, 202 have received services from a PFro. 19 of those 202 members were deemed eligible for a HEDIS/NCQA VBP measure. 

In other words, PFro service providers are currently providing care to 0.001% of the Alliance ACO membership, including 0.0002% of VBP eligible members.

```{r}
#| label: PFro Engagement Matrix
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Import the Global Members Roster of non duplicated list of distinct AHCCCSIDs
PFroEngagementMatrix <- as_tibble(NAZMmbrshp$AHCCCSID)

# If a Global Member AHCCCSID matches a PFro Member AHCCCSID, then return the "isVBP" value from the PFroSummary, if it does not match, return "NoPFro"
PFroEngagementMatrix$isVBP <- ifelse(NAZMmbrshp$AHCCCSID %in% PFroSummary_Distinct_byProvider$AHCCCSID, PFroSummary_Distinct_byProvider$isVBP, "No VBP, No PFro Svc")

# # Replace values in the "isVBP" column
# PFroEngagementMatrix$isVBP[PFroEngagementMatrix$isVBP == "isVBP"] <- "Member on VBP Roster"
# PFroEngagementMatrix$isVBP[PFroEngagementMatrix$isVBP == "NotVBP"] <- "Member Not on VBP Roster"

# Did they have PFro Services
PFroEngagementMatrix$isPFro <- ifelse(NAZMmbrshp$AHCCCSID %in% PFroSummary_Distinct_byProvider$AHCCCSID, "PFroServices", "NoPFroServices") 

# write to csv
write.csv(PFroEngagementMatrix, "./data/output/PFroEngagementMatrix.csv")

# Group the data by "isVBP" and "isPFro" and then count the occurrences of each combination
PFroEngagementSummary <- PFroEngagementMatrix %>%
  group_by(isVBP, isPFro) %>%
  summarise(Count = n())

SummaryOfMembers <- sum(PFroEngagementSummary$Count)

PFroEngagementSummary$PercentofAllAllianceMembers <- PFroEngagementSummary$Count / SummaryOfMembers

# Format the Percentage_of_Grand_Total column with two decimal places and a "%" symbol
PFroEngagementSummary$PercentofAllAllianceMembers <- sprintf("%.4f%%", PFroEngagementSummary$PercentofAllAllianceMembers)

# Rename the columns
colnames(PFroEngagementSummary) <- c("Included In VBPMeasure", "Received PFro Service", "Members", "Percent of All Alliance Members")

write.csv(PFroEngagementSummary, "./data/output/PFroEngagementSummary.csv")

kable(PFroEngagementSummary, format = "html", caption = "PFro Engagement and VBP Eligibility")


```

### Figure 6: PFro Engagement of Eligible VBP Members

This figure maps out the level to which PFro providers have engaged with Alliance members who have been deemed eligible for a HEDIS/NCQA VBP measure according to HC VBPQR.

```{r}
#| label: Graphic_PFroMemberEngagement
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Calculate the percentage of the grand total for each combination
PFroEngagementSummary$Percentage <- PFroEngagementSummary$Members / sum(PFroEngagementSummary$Members) * 100

# Write to csv
write.csv(PFroEngagementSummary, "./data/output/PFroEngagementSummary.csv")

# Create a bar plot with percentage of the grand total and x-axis labels at 45-degree angle
PFro_InvlvmtWithVBPMeasures <- ggplot(PFroEngagementSummary, 
                                      aes(x = `Included In VBPMeasure`, 
                                          y = Percentage, 
                                          fill = `Received PFro Service`)
                                      ) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = paste0(round(Percentage, 3), "%")), 
            position = position_dodge(width = 0.9), 
            vjust = -0.5, 
            size = 3.5
            ) + 
  labs(title = "PFro Involvement With VBP Measures",
       subtitle = "By Members Found on Health Choice VBP Roster",
       x = "VBP Quality Roster Status"
       ) +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.title.y = element_blank()
        )+
  scale_fill_viridis_d()

## Create Graphics
# Set the file path and name for saving the .png file
Report <- "./data/output/"
Report_Filename <- "2023-07-26_PFro_InvlvmtWithVBPMeasures.png"

# Save the ggplot as a .png file
# Report
ggsave(file.path(Report, Report_Filename), plot = PFro_InvlvmtWithVBPMeasures, width = 6, height = 4, dpi = 300)

PFro_InvlvmtWithVBPMeasures
```

### Figure 4: PFro Member Engagement by County

This figure demonstrates the prevalence of PFro Services throughout the Northern Region. This is a count of distinct members receiving PFro services.

For example, Family Involvement Center provided services to the following number of members per county in the calendar year 2022:

-   Coconino:   12
-   Mohave:     1
-   Yavapai:    4

```{r}
#| label: County
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Filter out rows where svccode is "T1016"
PFroSummary_filtered <- PFroSummary %>%
  filter(svccode != "T1016")

# Create a summary table by resCountyName and ProviderName
summary_table <- PFroSummary_filtered %>%
  group_by(resCountyName, ProviderName) %>%
  summarise(Count_of_Distinct_MemberID = n_distinct(AHCCCSID)) %>%
  ungroup()

# Sort the resCountyName based on the count of MemberIDs in descending order
summary_table <- summary_table %>%
  arrange(resCountyName, desc(Count_of_Distinct_MemberID))

# Create the stacked bar chart with flipped axes and sorted bars
PFro_AllMemberEngagementByCounty <- ggplot(data = summary_table, aes(x = fct_reorder(resCountyName, Count_of_Distinct_MemberID, .fun = sum), y = Count_of_Distinct_MemberID, fill = ProviderName)) +
  geom_bar(stat = "identity") +
  labs(title = "Member Engagement by County and Provider",
       subtitle = "T1016 Removed",
       x = "County",
       y = "Count of Distinct Members") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)
        )+
  guides(fill = guide_legend(title = "PFro Provider Name")) +
  scale_fill_viridis_d()+  # Use the "viridis" color palette for the fill
  coord_flip()

## Create Graphics
# Set the file path and name for saving the .png file
Report <- "./data/output/"
Report_Filename <- "2023-07-26_PFro_AllMemberEngagementByCounty.png"

# Save the ggplot as a .png file
# Report
ggsave(file.path(Report, Report_Filename), plot = PFro_AllMemberEngagementByCounty, width = 6, height = 4, dpi = 300)

PFro_AllMemberEngagementByCounty

```

### Figure 5: Alliance Population Pyramid

This figure demonstrates the the sex and age groupings of the Alliance Members who have received services from a PFro.

*Currently having an issue getting the age groupings to sort correctly. They don't obey normal ordinal rules because they are text, not numbers.*

```{r}
#| label: SexByAgeGroup
#| include: true
#| echo: true
#| warning: false
#| error: false

# Create the table for the Population Pyramid
DemoTable_SexByAgeGroup <- PFroSummary_Distinct_byProvider |> 
  select(Age, sex) |> 
  mutate(`00 - 05` = case_when(
    Age > 00 & Age <= 5 ~ "1", TRUE ~ "0")) |>
  mutate(`06 - 12` = case_when(
    Age > 06 & Age <= 12 ~ "1", TRUE ~ "0")) |> 
  mutate(`13 - 17` = case_when(
    Age > 13 & Age <= 17 ~ "1", TRUE ~ "0")) |> 
  mutate(`18 - 34` = case_when(
    Age > 18 & Age <= 34 ~ "1", TRUE ~ "0")) |> 
  mutate(`35 - 64` = case_when(
    Age > 35 & Age <= 64 ~ "1", TRUE ~ "0")) |> 
  mutate(`65 - 99` = case_when(
    Age > 65  ~ "1", TRUE ~ "0")) |> 
  subset(select = -Age) |> 
  #covert to dbl
  mutate(`00 - 05` = as.numeric(`00 - 05`)) |>  
  mutate(`06 - 12` = as.numeric(`06 - 12`)) |> 
  mutate(`13 - 17` = as.numeric(`13 - 17`)) |> 
  mutate(`18 - 34` = as.numeric(`18 - 34`)) |> 
  mutate(`35 - 64` = as.numeric(`35 - 64`)) |> 
  mutate(`65 - 99` = as.numeric(`65 - 99`)) |> 
  #Group by sex and summarize
  group_by(sex) |> 
  summarise_if(is.numeric, sum, na.rm = TRUE) |> 
  pivot_longer(!sex, 
               names_to = "Age_Group",
               values_to = "n") |> 
  # Change "M" "F" to "Male" "Female"
  mutate(sex = case_when(
    sex == "M" ~ "Male",
    sex == "F" ~ "Female"
  )) |> 
  #change male to negative so it flips sides of the axis on a shared facet plot
  mutate(n = ifelse(sex == "Male", n * -1, n)) |> 
  #change male female to factor
  mutate(sex = factor(sex, levels = c("Male","Female")))

# Export the table as a csv for reference, Date is date of progress report
write.csv(DemoTable_SexByAgeGroup, "./data/output/2023-07-26_DemoTable_SexByAgeGroup.csv")


```

```{r}
#| label: Graphic_SexByAgeGroup_Pyramid
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

Fig_PopPyramid <- ggplot(DemoTable_SexByAgeGroup, aes(x = n, y = reorder(Age_Group, n), fill = sex)) +
  geom_bar(stat = "identity", position = "identity") +
  geom_text(aes(label = abs(n), hjust = ifelse(sex == "Female", -0.2, 1.2)), size = 3) +
  scale_fill_manual(values = c(Female = "#440154", Male = "#35B779")) +
  scale_fill_manual(values = c(Female = "#FFA500", Male = "#000080")) +
  facet_wrap(~ sex, scales = "free") +
  labs(
    x = NULL, 
    y = NULL, 
    fill = "Member Sex",
    title = "PFro Member Engagement by Gender and Age Group",
    subtitle = "July 27, 2023",
    caption = "Source: BCBSAZ Global Members, Extracted 2023-07-26")  +
  theme_classic() +
  theme(
    axis.text.y.right = element_text(margin = margin(0, 2.2, 0, 2.2)),
    legend.position = "bottom", 
    legend.justification = "center",
    panel.spacing.x = unit(0, "pt"))

## Create Graphics
# Set the file path and name for saving the .png file
Report <- "./data/output/"
Report_Filename <- "2023-07-26_PFro_PopPyramid.png"

# Save the ggplot as a .png file
# Report
ggsave(file.path(Report, Report_Filename), plot = Fig_PopPyramid, width = 6, height = 4, dpi = 300)

Fig_PopPyramid

```

### Table 4: PFro Engagement With Eligible VBP Members

This table is a list of actively enrolled Alliance Members, who are listed on the Health Choice VBP Quality Roster, who have received services from a PFro, and all of the indicators by claim from the PFroSummary. There are multiple claims for 13 individuals. This table is found in the project output folder.

```{r}
#| label: PFroEngagementWithVBPMmbrs
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Filter the matrix for only individuals on VBP Roster
PFroEngagementWithVBPMmbrs <- PFroEngagementMatrix |> 
  filter(isVBP == "On VBP Roster")

# Rename the column 
colnames(PFroEngagementWithVBPMmbrs)[colnames(PFroEngagementWithVBPMmbrs) == "value"] <- "AHCCCSID"

PFroEngagementWithVBPMmbrs <- merge(x = PFroEngagementWithVBPMmbrs,
                                    y = PFroSummary,
                                    by = "AHCCCSID",
                                    all.x = TRUE
)

PFroEngagementWithVBPMmbrs <- PFroEngagementWithVBPMmbrs |> 
  rename(AHCCCSID = AHCCCSID,
         `On VBPQR Roster` = isVBP,
         `Received PFro Svc` = isPFro,
         PrimaryId = primaryId,
         `Alliance Provider` = ra,
         `Last names` = lastName,
         `First Name` = firstName,
         `Sex` = sex,
         `Date of Birth` = dob,
         `Mmbr Cnty of Residence` = resCountyName,
         `Mmbr Zip Code` = zipCode,
         `Date of Service` = DateOfService,
         `Service Code` = svccode,
         `Code Description` = Code_Description,
         `Alliance PFro Provider` = ProviderName,
         `Provider Type` = ProviderType,
         `Place of Service` = Placesvc,
         `Units` = units,
         `Amount Paid` = AmountPd,
         `Primary Diagnosis` = PrimaryDiagnosis, 
         `ICD10 Dx Description` = ICD10_Description,
         `ICD10 Dx Group Range` = DiagnosisGroupRange,
         `ICD10 Dx Group` = Diagnosis_Group,
         `Validated FUH Inpatient Svc` = isIP,
         `Validated AMM Pharmacy Svc` = isADMed,
         `VBP Measure` = SubMeasure.ID,
         `Gap Status` = Gap.Status
         )

write.csv(PFroEngagementWithVBPMmbrs, "./data/output/PFroEngagementWithVBPMembers.csv")

```

### Figure 7: Provider Engagement with VBP Eligible Members as Percent of Grand Total of Services

This figure visualizes the engagement of only those members who have been deemed eligible for a HEDIS/NCQA VBP measure, who have also received services from a PFro. All of the claims are included for each of the 13 affected individuals. Service Codes with less than 1% of grand total were excluded. Service COed T1016 has been removed because its volume obscures other clinical measures.

```{r}
#| label: Graphic_PFro Engagement With VBP Members
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Calculate the count of svccode by ProviderName
provider_svccode_counts <- PFroEngagementWithVBPMmbrs %>%
  count(`Alliance PFro Provider`, `Service Code`)

# Calculate the grand total count of svccode
grand_total <- sum(provider_svccode_counts$n)

# Calculate the percentage of count for each svccode by ProviderName
provider_svccode_counts <- provider_svccode_counts %>%
  group_by(`Alliance PFro Provider`) %>%
  mutate(Percentage = (n / grand_total) * 100)

# Filter to keep only svccodes accounting for at least 1% of the grand total
provider_svccode_counts_filtered <- provider_svccode_counts %>%
  filter(Percentage >= 1) |> 
  filter(`Service Code` != "T1016")

# Create the chart with svccode on the y-axis and the count as a percentage of the grand total on the x-axis, clustered by ProviderName with custom colors
Graphic_PFroEngagementWithVBPMmbrs <- ggplot(provider_svccode_counts_filtered, aes(x = Percentage, y = `Service Code`, fill = `Alliance PFro Provider`)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "PFro Engagement With VBP Members",
       subtitle = "As percent of grand total",
       x = "Percent of Total Services", 
       y = "Service Code") +
  theme_minimal() +
  scale_x_continuous(labels = scales::percent_format(scale = 1))+
  scale_fill_viridis_d()  # Use the "viridis" color palette for the fill  # Use custom colors for the fill# Rotate x-axis labels at 45 degrees 

## Create Graphics
# Set the file path and name for saving the .png file
Report <- "./data/output/"
Report_Filename <- "2023-07-26_PFro_EngagementWithVBPMmbrs.png"

# Save the ggplot as a .png file
# Report
ggsave(file.path(Report, Report_Filename), plot = Graphic_PFroEngagementWithVBPMmbrs, width = 6, height = 4, dpi = 300)

Graphic_PFroEngagementWithVBPMmbrs
```